////bin/dukhep_create_reader.py -n JetReader ../Macros/JetMacros.dat
#ifndef JETREADER
#define JETREADER 1
#include <vector>
#include <string>
#include <iostream>
#include "core/include/SCycleBaseNTuple.h"
#include "DukHep/include/DukHepFilter.h"
#include "TLorentzVector.h"

class JetReader {
  public:
  JetReader(SCycleBaseNTuple * o, const char * collname="jet");
    virtual ~JetReader(){};
    void SetColl(const char * collname) {
      cname = std::string(collname);
      std::cout << "Using jet collection name " << cname << std::endl;
    };
    std::string VarName(const char * s); 
    void ConnectVariables(std::string treename);
    void DeclareVariables();
    void Reset();
    void CopyToOutput();

    //define your getters here
    void FillFourMomentum(unsigned int il, TLorentzVector & vl) 
    { vl.SetPtEtaPhiE(m_JetPt->at(il),m_JetEta->at(il),m_JetPhi->at(il),m_JetE->at(il));}
    int GetNearestJet(float eta, float phi, float drmin) {
      int imin(-1);
      for (int i=0; i< m_NumJets; ++i) { 
	float d(DukHepFilter::deltaREtaPhi(eta-(*m_JetEta)[i],phi - (*m_JetPhi)[i]));
	if (d < drmin) { drmin=d; imin=i; }
      }
      return imin;
    }

  public:
    SCycleBaseNTuple * owner;    
    std::string cname;
    Int_t m_NumJets;
    Int_t o_m_NumJets;
    std::vector<float>* m_JetPt;
    std::vector<float> o_m_JetPt;
    std::vector<float>* m_JetEta;
    std::vector<float> o_m_JetEta;
    std::vector<float>* m_JetPhi;
    std::vector<float> o_m_JetPhi;
    std::vector<float>* m_JetE;
    std::vector<float> o_m_JetE;
    std::vector<float>* m_JetWeightSV0;
    std::vector<float> o_m_JetWeightSV0;
    std::vector<int>* m_JetIsUgly;
    std::vector<int> o_m_JetIsUgly;
    std::vector<int>* m_JetIsBad;
    std::vector<int> o_m_JetIsBad;
};
 #endif
