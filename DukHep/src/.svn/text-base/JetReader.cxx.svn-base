////bin/dukhep_create_reader.py -n JetReader ../Macros/JetMacros.dat
#include "include/JetReader.h"
JetReader::JetReader(SCycleBaseNTuple * ownr, const char* collname): owner(ownr), cname(collname),
m_JetPt(0),
m_JetEta(0),
m_JetPhi(0),
m_JetE(0),
m_JetWeightSV0(0),
m_JetIsUgly(0),
m_JetIsBad(0)
{std::cout << "JetReader: Collection name is " << cname << std::endl; }

std::string JetReader::VarName(const char * s){
  std::string tmp(s); 
  if (tmp.find("jet_")==0) {
    std::cout << "JetReader: replacing jet in " << tmp << std::endl;	
    return std::string(tmp.replace(0,3,cname)); 
  }
  return std::string(s);
};    

void JetReader::ConnectVariables(std::string treename){
  owner->ConnectVariable( treename.c_str(), VarName("jet_pt").c_str(), m_JetPt );
  owner->ConnectVariable( treename.c_str(), VarName("jet_eta").c_str(), m_JetEta );
  owner->ConnectVariable( treename.c_str(), VarName("jet_phi").c_str(), m_JetPhi );
  owner->ConnectVariable( treename.c_str(), VarName("jet_E").c_str(), m_JetE );
  owner->ConnectVariable( treename.c_str(), VarName("jet_flavor_weight_SV0").c_str(), m_JetWeightSV0 );
  owner->ConnectVariable( treename.c_str(), VarName("jet_isUgly").c_str(), m_JetIsUgly );
  owner->ConnectVariable( treename.c_str(), VarName("jet_isBadLoose").c_str(), m_JetIsBad );
}
void JetReader::DeclareVariables(){
  owner->DeclareVariable( o_m_JetPt, "jet_pt" );
  owner->DeclareVariable( o_m_JetEta, "jet_eta" );
  owner->DeclareVariable( o_m_JetPhi, "jet_phi" );
  owner->DeclareVariable( o_m_JetE, "jet_E" );
  owner->DeclareVariable( o_m_JetWeightSV0, "jet_flavor_weight_SV0" );
  owner->DeclareVariable( o_m_JetIsUgly, "jet_isUgly" );
  owner->DeclareVariable( o_m_JetIsBad, "jet_isBadLoose" );
}
void JetReader::Reset(){
 o_m_NumJets= -999;
 o_m_JetPt.clear();
 o_m_JetEta.clear();
 o_m_JetPhi.clear();
 o_m_JetE.clear();
 o_m_JetWeightSV0.clear();
 o_m_JetIsUgly.clear();
 o_m_JetIsBad.clear();
  }
void JetReader::CopyToOutput(){
 o_m_JetPt = std::vector<float>(*m_JetPt);
 o_m_JetEta = std::vector<float>(*m_JetEta);
 o_m_JetPhi = std::vector<float>(*m_JetPhi);
 o_m_JetE = std::vector<float>(*m_JetE);
 o_m_JetWeightSV0 = std::vector<float>(*m_JetWeightSV0);
 o_m_JetIsUgly = std::vector<int>(*m_JetIsUgly);
 o_m_JetIsBad = std::vector<int>(*m_JetIsBad);
}
